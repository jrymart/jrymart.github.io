<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://jrymart.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jrymart.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-12T22:31:52+00:00</updated><id>https://jrymart.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Small Projects over Tiny</title><link href="https://jrymart.github.io/blog/2024/small_over_tiny/" rel="alternate" type="text/html" title="Small Projects over Tiny"/><published>2024-03-27T00:00:00+00:00</published><updated>2024-03-27T00:00:00+00:00</updated><id>https://jrymart.github.io/blog/2024/small_over_tiny</id><content type="html" xml:base="https://jrymart.github.io/blog/2024/small_over_tiny/"><![CDATA[<p>A few months ago some friends of mine put together the silly and fun <a href="https://oneknightstand.club">One Knight Stand</a>. It’s a fun little chess game I encourage you to check out; the gist is that you make one and only one move on a game before it is whisked away for someone else to make the next move, and so on and so on. My coding experience consits of a handful of CS classes and the type of code you write when you’re the only person in your lab group who writes code, so suffice to say I did not feel able to take part in the fast paced development of a web app. Fast forward to today: One Knight Stand has been working for a few months, and my friends are dutifully plugging away, periodically making improvements. I noticed a small, me-sized bug: your ELO score does not correctly display when you first log in; instead it updates after you make your first move of the session (later I realized it updates 20 seconds after a new session). I’m on spring break, so I decided to try to fix it. The One Knight Stand codebase is, as far as code bases go, quite small, I’d say just a tad bigger than a tiny tutorial. It uses Django and Python for the back-end, and Svelte and TypeScript for the front end. I know Python, but I haven’t touched JavaScript for about 7 years, let alone something like Svelte. It took me about two hours to fix, and I learned a tiny bit about Django and a small amount about Svelete, aynchronous programming, web development, and GitHub.</p> <p>I don’t think I would have learned as much so quickly going through a tutorial. In the past, library tutorials leave me feeling bored. If I don’t have a pressing need to learn whatever tool it is, I give up, and if I do, have a need, I rush ahead until I do it badly enough I start to learn something. Diving in to a well designed project that was small enough to for me to grok, and with a really simple doable goal was the most fun I’ve had learning something new in a while. I think most importantly, it let me learn in the way that felt the most natural for me, instead of putting me on rails to build up the necessary set of skills to do something more interesting from scratch. I wonder if this could be incorporated into getting started guides for new tools: rather than holding your hand all the way through something tiny, you get thrown in and have to solve a problem on something small.</p> <p>Back when I was a security engineer, this is actually how I learned things. My company would pay vendors hundreds of dollars to put me through the most mind numbing courses on their tech, but I only really learned things when I had a task to do with it. And those tasks were never “set this up from scratch”, they were almost always fixing something small. I wonder if there are lessons here I can take to the classes I teach…</p>]]></content><author><name></name></author><summary type="html"><![CDATA[A few months ago some friends of mine put together the silly and fun One Knight Stand. It’s a fun little chess game I encourage you to check out; the gist is that you make one and only one move on a game before it is whisked away for someone else to make the next move, and so on and so on. My coding experience consits of a handful of CS classes and the type of code you write when you’re the only person in your lab group who writes code, so suffice to say I did not feel able to take part in the fast paced development of a web app. Fast forward to today: One Knight Stand has been working for a few months, and my friends are dutifully plugging away, periodically making improvements. I noticed a small, me-sized bug: your ELO score does not correctly display when you first log in; instead it updates after you make your first move of the session (later I realized it updates 20 seconds after a new session). I’m on spring break, so I decided to try to fix it. The One Knight Stand codebase is, as far as code bases go, quite small, I’d say just a tad bigger than a tiny tutorial. It uses Django and Python for the back-end, and Svelte and TypeScript for the front end. I know Python, but I haven’t touched JavaScript for about 7 years, let alone something like Svelte. It took me about two hours to fix, and I learned a tiny bit about Django and a small amount about Svelete, aynchronous programming, web development, and GitHub.]]></summary></entry><entry><title type="html">Microteaching about Functions</title><link href="https://jrymart.github.io/blog/2023/microteaching/" rel="alternate" type="text/html" title="Microteaching about Functions"/><published>2023-08-29T00:00:00+00:00</published><updated>2023-08-29T00:00:00+00:00</updated><id>https://jrymart.github.io/blog/2023/microteaching</id><content type="html" xml:base="https://jrymart.github.io/blog/2023/microteaching/"><![CDATA[<h2 id="ta-training">TA Training</h2> <p>Well, I am officially a graduate student, and as such I got a few precious days of pedagogy training before I dive in this semester. As part of this training we did some “microteaching”: preparing and executing of 10 minute lessons. I am TAing a class on Python programming for geoscientists and so I prepared a short lesson on functions, with the goal of helping my “students” develop some intuition on functions. Here’s the thing, I LOVE functions. I’m one of those people who had a Lisp class in college absolutely change my life, or at least how I program, so as you can imagine, a special not-so-small place in my heart beats for functions. All that to say, I wanted to get this right, and I didn’t want my love to overcomplicate things.</p> <h3 id="the-lesson">The Lesson</h3> <p>The lesson was zero code, zero pseudocode, just talking about things we all do, and pretending they’re functions. After going over different ways they might have used functions in the past, and giving two very general and informal definition, I talked about how we can thinking of our daily routines as functions, giving an example from my own life. Then I had my students do the same. Next I introduced the idea that we often want functions to take inputs, transform them, and return something. After a few examples from me, I had students think of something they do for their research, and describe it as a function with input. One of my students did this for processing samples in a scanning electron microscope, taking their thin section, preparing it, and returning some sort of quantitative output.</p> <h3 id="the-takeaways">The Takeaways</h3> <p>All in all, I think it went well. The feedback I got from my peers was that they found it helpful for developing that intuition, which not all of them had starting out. Figuring out what to put in a 10 minute lesson is <em>hard</em>, and I think I did a good but not great job fitting in enough that it’s interesting but not being overly ambitious. I wish I had the students discuss their examples together a little more and it turned out my students did too, as expressed by their feedback. It was something I had thought about, but I didn’t think I had time for. It turned out I finished a couple of minutes early so I did have time for that…so…lesson learned? One piece of GREAT feedback I got was that I should have used more diagrams! The student gave the example of workflow diagrams, which I think would have been a great accompaniment to my examples. If I were to do this in the future (which I probably won’t, for better or for worse) I would definitely incorporate that. Lastly, I feel like we don’t do a lot of explicit work helping students develop their intuition for programming concepts, especially in applied classes for scientists. I wonder if this is something that we should be incorporating more. If you have thoughts about that, please reach out!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[TA Training Well, I am officially a graduate student, and as such I got a few precious days of pedagogy training before I dive in this semester. As part of this training we did some “microteaching”: preparing and executing of 10 minute lessons. I am TAing a class on Python programming for geoscientists and so I prepared a short lesson on functions, with the goal of helping my “students” develop some intuition on functions. Here’s the thing, I LOVE functions. I’m one of those people who had a Lisp class in college absolutely change my life, or at least how I program, so as you can imagine, a special not-so-small place in my heart beats for functions. All that to say, I wanted to get this right, and I didn’t want my love to overcomplicate things. The Lesson The lesson was zero code, zero pseudocode, just talking about things we all do, and pretending they’re functions. After going over different ways they might have used functions in the past, and giving two very general and informal definition, I talked about how we can thinking of our daily routines as functions, giving an example from my own life. Then I had my students do the same. Next I introduced the idea that we often want functions to take inputs, transform them, and return something. After a few examples from me, I had students think of something they do for their research, and describe it as a function with input. One of my students did this for processing samples in a scanning electron microscope, taking their thin section, preparing it, and returning some sort of quantitative output. The Takeaways All in all, I think it went well. The feedback I got from my peers was that they found it helpful for developing that intuition, which not all of them had starting out. Figuring out what to put in a 10 minute lesson is hard, and I think I did a good but not great job fitting in enough that it’s interesting but not being overly ambitious. I wish I had the students discuss their examples together a little more and it turned out my students did too, as expressed by their feedback. It was something I had thought about, but I didn’t think I had time for. It turned out I finished a couple of minutes early so I did have time for that…so…lesson learned? One piece of GREAT feedback I got was that I should have used more diagrams! The student gave the example of workflow diagrams, which I think would have been a great accompaniment to my examples. If I were to do this in the future (which I probably won’t, for better or for worse) I would definitely incorporate that. Lastly, I feel like we don’t do a lot of explicit work helping students develop their intuition for programming concepts, especially in applied classes for scientists. I wonder if this is something that we should be incorporating more. If you have thoughts about that, please reach out!]]></summary></entry><entry><title type="html">Staying on top of research with RSS and Zotero</title><link href="https://jrymart.github.io/blog/2023/first-post/" rel="alternate" type="text/html" title="Staying on top of research with RSS and Zotero"/><published>2023-05-17T00:00:00+00:00</published><updated>2023-05-17T00:00:00+00:00</updated><id>https://jrymart.github.io/blog/2023/first-post</id><content type="html" xml:base="https://jrymart.github.io/blog/2023/first-post/"><![CDATA[<h2 id="rss">RSS</h2> <p>Recently I’ve started using RSS to great personal delight. This helps me focus my reading on long(er) form content that I find fulfilling and stay away from the juicy candy of comment threads from social news sites like Hacker News. Comment threads are great, but I find the more tempting and less satisfying than articles themselves. Subscribing to some high quality RSS feeds keeps me focused on articles first, and then I can goof off with comment threads when I’m bored. However, I’ve found another great use for RSS, staying on top of the scientific literature. It’s pretty easy, most journals have RSS feeds, which you can subscribe to in your favorite RSS reader. Then, as new articles are published, they pop up in your reader for your review. This is great for me as it’s not an easily deletable and stress inducing unread email, and is mixed up with other juicier RSS feeds from news sources and opinion blogs. I use the <a href="https://f-droid.org/en/packages/com.nononsenseapps.feeder/">Feeder</a> app from F-Droid, which as far as I know is totally distinct from the SaaS platform <a href="https://feeder.co/">Feeder.co</a>.</p> <h2 id="zotero">Zotero</h2> <p><a href="https://www.zotero.org/">Zotero</a>, if you haven’t heard of it, is extremely wonderful citation management software that makes it easy to keep track of papers and generate citations. It even interfaces with <a href="https://www.overleaf.com/">Overleaf</a> (if you pay for Overleaf) which means your .bib file will always be up to date. Once I was following papers in my RSS reader, being able to import the papers I’d want to revisit into Zotero was the next step. I think if you’re using a browser based RSS reader, this would be easy to accomplish with the Zotero connector browser extension. However, this is all being done on my phone. I found the very straightforward Android app <a href="https://play.google.com/store/apps/details?id=com.mochar.sendtozotero">Send to Zotero</a> which does exactly what I need to do. Now when an article that I might want to reference later pops up in my RSS reader, I simply click the reader’s “share button”, select the “Send to Zotero” app, which adds it to my Zotero account with whatever tags I want. Easy as pie! Other apps with the same functionality (including an iOS app) can be found <a href="https://www.zotero.org/support/mobile">here</a>. I’m very excited about this workflow, and hope it will keep me up to date with the state of my field.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[RSS Recently I’ve started using RSS to great personal delight. This helps me focus my reading on long(er) form content that I find fulfilling and stay away from the juicy candy of comment threads from social news sites like Hacker News. Comment threads are great, but I find the more tempting and less satisfying than articles themselves. Subscribing to some high quality RSS feeds keeps me focused on articles first, and then I can goof off with comment threads when I’m bored. However, I’ve found another great use for RSS, staying on top of the scientific literature. It’s pretty easy, most journals have RSS feeds, which you can subscribe to in your favorite RSS reader. Then, as new articles are published, they pop up in your reader for your review. This is great for me as it’s not an easily deletable and stress inducing unread email, and is mixed up with other juicier RSS feeds from news sources and opinion blogs. I use the Feeder app from F-Droid, which as far as I know is totally distinct from the SaaS platform Feeder.co.]]></summary></entry></feed>